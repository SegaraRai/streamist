name: 'Deploy Server'

concurrency:
  group: deploy_server-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - staging
    paths:
      - 'packages/server/**'
      - 'packages/shared/**'
      - 'packages/shared-server/**'
      - '.github/workflows/deploy_server.yml'

jobs:
  deploy:
    name: Build and deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - run: echo "TARGET_BUILD_REV=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set env (Production)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "DEPLOY_ENV=PRODUCTION" >> $GITHUB_ENV
          echo "TARGET_NODE_ENV=production" >> $GITHUB_ENV

      - name: Set env (Staging)
        if: github.ref == 'refs/heads/staging'
        run: |
          echo "DEPLOY_ENV=STAGING" >> $GITHUB_ENV
          echo "TARGET_NODE_ENV=staging" >> $GITHUB_ENV

      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.2.1
        with:
          version: latest
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: pnpm
      - run: pnpm i --frozen-lockfile
      - run: pnpm run generate
      - run: pnpm run build:server
      - run: DOCKER_BUILDKIT=1 docker build -t streamist-server ./packages/server/docker/docker.server
      - run: docker save streamist-server | xz -0 > ./packages/server/docker/compose/streamist-server.tar.xz
      - name: Create env files
        run: |
          cd ./packages/server/docker/compose
          printenv SECRET_ENV_DATABASE > ./database.env
          printenv SECRET_ENV_DATABASE_BACKUP > ./database_backup.env
          printenv SECRET_ENV_SERVER > ./server.env
          printenv SECRET_GOOGLE_APPLICATION_CREDENTIALS_JSON > ./gapp-credentials.json
        env:
          SECRET_ENV_DATABASE: ${{ secrets[format('{0}_SECRET_ENV_DATABASE', env.DEPLOY_ENV)] }}
          SECRET_ENV_DATABASE_BACKUP: ${{ secrets[format('{0}_SECRET_ENV_DATABASE_BACKUP', env.DEPLOY_ENV)] }}
          SECRET_ENV_SERVER: ${{ secrets[format('{0}_SECRET_ENV_SERVER', env.DEPLOY_ENV)] }}
          SECRET_GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets[format('{0}_SECRET_GOOGLE_APPLICATION_CREDENTIALS_JSON', env.DEPLOY_ENV)] }}
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets[format('SECRET_GH_{0}_SSH_KEY', env.DEPLOY_ENV)] }}
          name: id_ed25519
          known_hosts: ${{ secrets[format('SECRET_GH_{0}_SSH_KNOWN_HOSTS', env.DEPLOY_ENV)] }}
          if_key_exists: fail
      - name: Deploy to server
        run: |
          cd ./packages/server/docker/compose
          rm -f .gitignore
          chmod 0700 deploy.sh
          chmod 0600 *.env
          chmod 0600 *.env.example
          rsync -av --no-owner --no-group --checksum --delete --exclude data -e "ssh -p $SSH_PORT" ./ deploy@$SSH_REMOTE:/app/
          ssh -p $SSH_PORT deploy@$SSH_REMOTE '/app/deploy.sh'
        env:
          SSH_REMOTE: ${{ secrets[format('SECRET_GH_{0}_SSH_REMOTE', env.DEPLOY_ENV)] }}
          SSH_PORT: '43642'
