name: 'Staging: Build and deploy Server'

on:
  push:
    branches:
      - staging
    paths:
      - 'packages/server/**'
      - 'packages/shared/**'
      - 'packages/shared-server/**'
      - '.github/workflows/staging_deploy_server.yml'

jobs:
  deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v2
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: pnpm
      - run: pnpm i --frozen-lockfile
      - run: pnpm run generate
      - run: pnpm run build:server
        env:
          TARGET_NODE_ENV: staging
      - run: docker build -t streamist-server ./packages/server/docker/docker.server
      - run: docker save streamist-server | xz -0 > ./packages/server/docker/compose/streamist-server.tar.xz
      - run: |
          cd ./packages/server/compose
          ./createEnv.sh
          printenv SECRET_GOOGLE_APPLICATION_CREDENTIALS_JSON > gapp-credentials.json
        env:
          SECRET_POSTGRES_USER: ${{ secrets.STAGING_SECRET_POSTGRES_USER }}
          SECRET_POSTGRES_PASSWORD: ${{ secrets.STAGING_SECRET_POSTGRES_PASSWORD }}
          SECRET_POSTGRES_DB: ${{ secrets.STAGING_SECRET_POSTGRES_DB }}
          SECRET_DATABASE_URL: ${{ secrets.STAGING_SECRET_DATABASE_URL }}
          SECRET_API_JWT_SECRET: ${{ secrets.STAGING_SECRET_API_JWT_SECRET }}
          SECRET_CDN_JWT_SECRET: ${{ secrets.STAGING_SECRET_CDN_JWT_SECRET }}
          SECRET_REFRESH_TOKEN_JWT_SECRET: ${{ secrets.STAGING_SECRET_REFRESH_TOKEN_JWT_SECRET }}
          SECRET_TRANSCODER_CALLBACK_SECRET: ${{ secrets.STAGING_SECRET_TRANSCODER_CALLBACK_SECRET }}
          SECRET_API_PROXY_AUTH_TOKEN: ${{ secrets.STAGING_SECRET_API_PROXY_AUTH_TOKEN }}
          SECRET_SERVER_WASABI_ACCESS_KEY_ID: ${{ secrets.STAGING_SECRET_SERVER_WASABI_ACCESS_KEY_ID }}
          SECRET_SERVER_WASABI_SECRET_ACCESS_KEY: ${{ secrets.STAGING_SECRET_SERVER_WASABI_SECRET_ACCESS_KEY }}
          SECRET_USER_DOWNLOAD_WASABI_ACCESS_KEY_ID: ${{ secrets.STAGING_SECRET_USER_DOWNLOAD_WASABI_ACCESS_KEY_ID }}
          SECRET_USER_DOWNLOAD_WASABI_SECRET_ACCESS_KEY: ${{ secrets.STAGING_SECRET_USER_DOWNLOAD_WASABI_SECRET_ACCESS_KEY }}
          SECRET_USER_UPLOAD_WASABI_ACCESS_KEY_ID: ${{ secrets.STAGING_SECRET_USER_UPLOAD_WASABI_ACCESS_KEY_ID }}
          SECRET_USER_UPLOAD_WASABI_SECRET_ACCESS_KEY: ${{ secrets.STAGING_SECRET_USER_UPLOAD_WASABI_SECRET_ACCESS_KEY }}
          SECRET_INVOKE_TRANSCODER_LAMBDA_ACCESS_KEY_ID: ${{ secrets.STAGING_SECRET_INVOKE_TRANSCODER_LAMBDA_ACCESS_KEY_ID }}
          SECRET_INVOKE_TRANSCODER_LAMBDA_SECRET_ACCESS_KEY: ${{ secrets.STAGING_SECRET_INVOKE_TRANSCODER_LAMBDA_SECRET_ACCESS_KEY }}
          HCAPTCHA_SITE_KEY_FOR_REGISTRATION: ${{ secrets.STAGING_HCAPTCHA_SITE_KEY_FOR_REGISTRATION }}
          SECRET_HCAPTCHA_SECRET_KEY: ${{ secrets.STAGING_SECRET_HCAPTCHA_SECRET_KEY }}
          SECRET_GOOGLE_APPLICATION_CREDENTIALS_JSON: ${{ secrets.STAGING_SECRET_GOOGLE_APPLICATION_CREDENTIALS_JSON }}
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SECRET_GH_STAGING_SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SECRET_GH_STAGING_SSH_KNOWN_HOSTS }}
          if_key_exists: fail
      - name: Deploy to server
        run: |
          cd ./packages/server/docker/compose
          rm .gitignore
          rm createEnv.sh
          rsync -av --no-owner --no-group --checksum --delete --exclude data -e "ssh -p $SSH_PORT" ./ deploy@$SSH_REMOTE:/app/
          ssh -p $SSH_PORT deploy@$SSH_REMOTE '/app/deploy.sh'
        env:
          SSH_REMOTE: ${{ secrets.SECRET_GH_STAGING_SSH_IP_ADDRESS }}
          SSH_PORT: ${{ secrets.SECRET_GH_STAGING_SSH_PORT }}
