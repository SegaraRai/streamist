// Vitest Snapshot v1

exports[`VAuthBodyRefreshToken > should reject malformed payloads 1`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "equals": "grant_type must be equal to refresh_token",
    },
    "property": "grant_type",
    "value": "foo",
  },
]
`;

exports[`VAuthBodyRefreshToken > should reject malformed payloads 2`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "equals": "grant_type must be equal to refresh_token",
    },
    "property": "grant_type",
    "value": "password",
  },
  ValidationError {
    "children": [],
    "constraints": {
      "isNotEmpty": "refresh_token should not be empty",
      "isString": "refresh_token must be a string",
    },
    "property": "refresh_token",
    "value": undefined,
  },
]
`;

exports[`VAuthBodyRefreshToken > should reject malformed payloads 3`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "equals": "grant_type must be equal to refresh_token",
    },
    "property": "grant_type",
    "value": undefined,
  },
]
`;

exports[`VAuthBodyRefreshToken > should reject malformed payloads 4`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "isString": "refresh_token must be a string",
    },
    "property": "refresh_token",
    "value": 123,
  },
]
`;

exports[`VAuthBodyRefreshToken > should reject malformed payloads 5`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "isNotEmpty": "refresh_token should not be empty",
      "isString": "refresh_token must be a string",
    },
    "property": "refresh_token",
    "value": undefined,
  },
]
`;

exports[`VAuthBodyRefreshToken > should reject malformed payloads 6`] = `
[
  ValidationError {
    "children": [],
    "constraints": {
      "isNotEmpty": "refresh_token should not be empty",
      "isString": "refresh_token must be a string",
    },
    "property": "refresh_token",
    "value": null,
  },
]
`;
