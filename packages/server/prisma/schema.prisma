generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  // to deal with pnpm
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("API_DATABASE_URL")
}

model User {
  id             String          @id
  email          String          @unique
  name           String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  albums         Album[]
  artists        Artist[]
  image          Image[]
  imageFile      ImageFile[]
  playlists      Playlist[]
  tags           Tag[]
  tracks         Track[]
  trackFiles     TrackFile[]
  sources        Source[]
  sourceFiles    SourceFile[]
  albumCoArtists AlbumCoArtist[]
  trackCoArtist  TrackCoArtist[]
}

model Tag {
  id        String     @id
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String
  albums    Album[]
  artists   Artist[]
  tracks    Track[]
  playlists Playlist[]

  @@unique([userId, name])
  @@index([userId])
}

model Source {
  id                  String       @id
  state               String
  transcodeStartedAt  DateTime?
  transcodeFinishedAt DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @default(now()) @updatedAt
  user                User         @relation(fields: [userId], references: [id])
  userId              String
  images              Image[]
  tracks              Track[]
  files               SourceFile[]

  @@index([userId])
}

model SourceFile {
  id             String    @id
  // 'audio' | 'cueSheet' | 'image'
  type           String
  region         String
  filename       String
  fileSize       Int
  sha256         String?
  // only for audio files (optional)
  cueSheetFileId String?
  // only for image files (required)
  albumId        String?
  uploaded       Boolean   @default(false)
  // UploadId for multipart uploads
  uploadId       String?
  uploadedAt     DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  source         Source    @relation(fields: [sourceId], references: [id])
  sourceId       String
  user           User      @relation(fields: [userId], references: [id])
  userId         String

  @@index([userId])
  @@index([sourceId])
}

model Artist {
  id             String          @id
  name           String
  nameSort       String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  tracks         Track[]
  albums         Album[]
  tags           Tag[]
  albumCoArtists AlbumCoArtist[]
  trackCoArtists TrackCoArtist[]

  @@index([userId])
}

model Album {
  id             String          @id
  title          String
  titleSort      String?
  notes          String          @default("")
  replayGainGain Float?
  replayGainPeak Float?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now()) @updatedAt
  user           User            @relation(fields: [userId], references: [id])
  userId         String
  artist         Artist          @relation(fields: [artistId], references: [id])
  artistId       String
  images         Image[]
  imageOrder     String          @default("")
  tracks         Track[]
  tags           Tag[]
  coArtists      AlbumCoArtist[]

  @@index([userId])
  @@index([artistId])
}

model Track {
  id                   String          @id
  title                String
  titleSort            String?
  discNumber           Int
  trackNumber          Int
  duration             Float
  comment              String?
  lyric                String?
  releaseDate          String?
  releaseDatePrecision String?
  releaseDateText      String?
  genre                String?
  bpm                  Int?
  replayGainGain       Float?
  replayGainPeak       Float?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @default(now()) @updatedAt
  user                 User            @relation(fields: [userId], references: [id])
  userId               String
  artist               Artist          @relation(fields: [artistId], references: [id])
  artistId             String
  album                Album           @relation(fields: [albumId], references: [id])
  albumId              String
  source               Source          @relation(fields: [sourceId], references: [id])
  sourceId             String
  files                TrackFile[]
  playlists            Playlist[]
  tags                 Tag[]
  coArtists            TrackCoArtist[]

  @@index([userId])
  @@index([albumId])
  @@index([artistId])
}

model TrackFile {
  id        String   @id
  region    String
  format    String
  mimeType  String
  extension String
  fileSize  Int
  sha256    String
  duration  Float
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@index([trackId])
}

model Image {
  id           String      @id
  sourceWidth  Int
  sourceHeight Int
  dHash        String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  source       Source      @relation(fields: [sourceId], references: [id])
  sourceId     String
  files        ImageFile[]
  albums       Album[]

  @@index([userId])
}

model ImageFile {
  id        String   @id
  region    String
  format    String
  mimeType  String
  extension String
  fileSize  Int
  sha256    String
  width     Int
  height    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  image     Image    @relation(fields: [imageId], references: [id])
  imageId   String
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([userId])
  @@index([imageId])
}

model AlbumCoArtist {
  id        String   @id
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   String

  @@unique([role, albumId, artistId])
  @@index([userId])
  @@index([artistId])
  @@index([albumId])
}

model TrackCoArtist {
  id        String   @id
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String
  track     Track    @relation(fields: [trackId], references: [id])
  trackId   String

  @@unique([role, trackId, artistId])
  @@index([userId])
  @@index([artistId])
  @@index([trackId])
}

model Playlist {
  id         String   @id
  title      String
  notes      String   @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  tracks     Track[]
  trackOrder String   @default("")
  tags       Tag[]

  @@index([userId])
}
