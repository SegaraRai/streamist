generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
  // to deal with pnpm
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("API_DATABASE_URL")
}

model User {
  id              String           @id
  email           String           @unique
  name            String
  createdAt       Int //@db.BigInt
  updatedAt       Int //@db.BigInt
  albums          Album[]
  artists         Artist[]
  image           Image[]
  imageFile       ImageFile[]
  playlists       Playlist[]
  tracks          Track[]
  trackFiles      TrackFile[]
  sources         Source[]
  sourceFiles     SourceFile[]
  albumCoArtists  AlbumCoArtist[]
  trackCoArtist   TrackCoArtist[]
  deletions       Deletion[]
  resourceUpdates ResourceUpdate[] // though this is an one-to-one relation
  APlaylistTrack  APlaylistTrack[]
  AAlbumImage     AAlbumImage[]
  AArtistImage    AArtistImage[]
  APlaylistImage  APlaylistImage[]
}

model Source {
  id                  String       @id
  state               String // SourceState
  transcodeStartedAt  Int? //@db.BigInt
  transcodeFinishedAt Int? //@db.BigInt
  createdAt           Int //@db.BigInt
  updatedAt           Int //@db.BigInt
  user                User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  files               SourceFile[]

  @@index([userId])
}

model SourceFile {
  id             String       @id
  state          String // SourceFileState
  // 'audio' | 'cueSheet' | 'image'
  type           String
  region         String
  filename       String
  fileSize       Int
  // sha256 is NULL until the file is uploaded
  sha256         String?
  // only for audio files (optional)
  cueSheetFileId String?
  // only for image files (required)
  attachToType   String? // 'album' | 'artist' | 'playlist'
  attachToId     String?
  attachPrepend  Boolean?
  // only for extracted image files
  sourceFile     SourceFile?  @relation("SourceFileToExtractedSourceFile", fields: [sourceFileId], references: [id], onDelete: Restrict)
  sourceFileId   String?
  entityExists   Boolean // whether the original file exists in S3. `false` for unuploaded files and extracted image files
  uploadId       String? // S3 UploadId for multipart uploads
  uploadedAt     Int? //@db.BigInt
  createdAt      Int //@db.BigInt
  updatedAt      Int //@db.BigInt
  source         Source       @relation(fields: [sourceId], references: [id], onDelete: Restrict)
  sourceId       String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  images         Image[]
  tracks         Track[]
  extractedFiles SourceFile[] @relation("SourceFileToExtractedSourceFile")

  @@index([userId])
  @@index([sourceId])
}

model Artist {
  id             String          @id
  name           String
  nameSort       String?
  createdAt      Int //@db.BigInt
  updatedAt      Int //@db.BigInt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  images         AArtistImage[]
  imageOrder     String          @default("")
  tracks         Track[]
  albums         Album[]
  albumCoArtists AlbumCoArtist[]
  trackCoArtists TrackCoArtist[]

  @@index([userId])
}

model Album {
  id             String          @id
  title          String
  titleSort      String?
  notes          String          @default("")
  replayGainGain Float?
  replayGainPeak Float?
  createdAt      Int //@db.BigInt
  updatedAt      Int //@db.BigInt
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  artist         Artist          @relation(fields: [artistId], references: [id], onDelete: Restrict)
  artistId       String
  images         AAlbumImage[]
  imageOrder     String          @default("")
  tracks         Track[]
  coArtists      AlbumCoArtist[]

  @@index([userId])
  @@index([artistId])
}

model Track {
  id                   String           @id
  title                String
  titleSort            String?
  discNumber           Int
  trackNumber          Int
  duration             Float
  comment              String?
  lyric                String?
  releaseDate          String?
  releaseDatePrecision String?
  releaseDateText      String?
  genre                String?
  bpm                  Int?
  replayGainGain       Float?
  replayGainPeak       Float?
  createdAt            Int //@db.BigInt
  updatedAt            Int //@db.BigInt
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId               String
  artist               Artist           @relation(fields: [artistId], references: [id], onDelete: Restrict)
  artistId             String
  album                Album            @relation(fields: [albumId], references: [id], onDelete: Restrict)
  albumId              String
  sourceFile           SourceFile       @relation(fields: [sourceFileId], references: [id], onDelete: Restrict)
  sourceFileId         String
  files                TrackFile[]
  playlists            APlaylistTrack[]
  coArtists            TrackCoArtist[]

  @@index([userId])
  @@index([albumId])
  @@index([artistId])
}

model TrackFile {
  id        String @id
  region    String
  format    String
  mimeType  String
  extension String
  fileSize  Int
  sha256    String
  duration  Float
  createdAt Int //@db.BigInt
  updatedAt Int //@db.BigInt
  track     Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@index([trackId])
}

model Image {
  id           String           @id
  sourceWidth  Int
  sourceHeight Int
  dHash        String
  createdAt    Int //@db.BigInt
  updatedAt    Int //@db.BigInt
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  sourceFile   SourceFile       @relation(fields: [sourceFileId], references: [id], onDelete: Restrict)
  sourceFileId String
  files        ImageFile[]
  albums       AAlbumImage[]
  artists      AArtistImage[]
  playlists    APlaylistImage[]

  @@index([userId])
}

model ImageFile {
  id        String @id
  region    String
  format    String
  mimeType  String
  extension String
  fileSize  Int
  sha256    String
  width     Int
  height    Int
  createdAt Int //@db.BigInt
  updatedAt Int //@db.BigInt
  image     Image  @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId   String
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@index([imageId])
}

model AlbumCoArtist {
  id        String @id
  role      String
  createdAt Int //@db.BigInt
  updatedAt Int //@db.BigInt
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  artist    Artist @relation(fields: [artistId], references: [id], onDelete: Restrict)
  artistId  String
  album     Album  @relation(fields: [albumId], references: [id], onDelete: Cascade)
  albumId   String

  @@unique([role, albumId, artistId])
  @@index([userId])
  @@index([artistId])
  @@index([albumId])
}

model TrackCoArtist {
  id        String @id
  role      String
  createdAt Int //@db.BigInt
  updatedAt Int //@db.BigInt
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  artist    Artist @relation(fields: [artistId], references: [id], onDelete: Restrict)
  artistId  String
  track     Track  @relation(fields: [trackId], references: [id], onDelete: Cascade)
  trackId   String

  @@unique([role, trackId, artistId])
  @@index([userId])
  @@index([artistId])
  @@index([trackId])
}

model Playlist {
  id         String           @id
  title      String
  notes      String           @default("")
  createdAt  Int //@db.BigInt
  updatedAt  Int //@db.BigInt
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  images     APlaylistImage[]
  imageOrder String           @default("")
  tracks     APlaylistTrack[]
  trackOrder String           @default("")

  @@index([userId])
}

model Deletion {
  // 'album', 'albumCoArtist', 'artist', 'image', 'imageFile', 'playlist', 'source', 'sourceFile', 'track', 'trackCoArtist', 'trackFile'
  entityType String
  entityId   String
  deletedAt  Int //@db.BigInt
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String

  @@id([entityType, entityId, userId])
  @@index([userId])
}

model ResourceUpdate {
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String @id
  updatedAt Int //@db.BigInt
}

// not visible to the user
model AAlbumImage {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  album  Album  @relation(fields: [x], references: [id], onDelete: Cascade)
  x      String
  image  Image  @relation(fields: [y], references: [id], onDelete: Restrict)
  y      String

  @@id([x, y])
  @@index([userId])
  @@index([x])
  @@index([y])
}

// not visible to the user
model AArtistImage {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  artist Artist @relation(fields: [x], references: [id], onDelete: Cascade)
  x      String
  image  Image  @relation(fields: [y], references: [id], onDelete: Restrict)
  y      String

  @@id([x, y])
  @@index([userId])
  @@index([x])
  @@index([y])
}

// not visible to the user
model APlaylistImage {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  playlist Playlist @relation(fields: [x], references: [id], onDelete: Cascade)
  x        String
  image    Image    @relation(fields: [y], references: [id], onDelete: Restrict)
  y        String

  @@id([x, y])
  @@index([userId])
  @@index([x])
  @@index([y])
}

// not visible to the user
model APlaylistTrack {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  playlist Playlist @relation(fields: [x], references: [id], onDelete: Cascade)
  x        String
  track    Track    @relation(fields: [y], references: [id], onDelete: Restrict)
  y        String

  @@id([x, y])
  @@index([userId])
  @@index([x])
  @@index([y])
}
